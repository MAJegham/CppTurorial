___ Question 4 ___
Il s'agit d'une méthode abstraite ou virtuelle pure déclarée dans le .h comme "virtual" et avec l'indication " = 0 ".
Il s'agit d'une classe abstraite qui ne peut être instanciée car elle contient la méthode virtuelle pure playMedia().

___ Question 5 ___
Il s'agit du polymorphisme qui permet de définir plusieurs comportement au même objet ici les elements du vector<Mltimedia> pointent sur des objets de type réellement différents (des "Video"s et des "Photo"s) et selon l'objet pointé les méthodes playMedia et Describe ont des comportement différents.
Pour pouvoir utiliser celà en c++ on doit utiliser des pointeurs ou des références et le mot clé "virtual".
C'est pour cela que le vector créé contient des pointeurs vers les objets (Multimedia*) et non pas les objets eux mêmes.
L'utilisation des objets eux-mêmes ne peret pas la résolution dynamique et le compilateur ne saurait à quel type d'objet Multimedia il a affaire.
Dans java, le polymorphisme fonctionne si on déclarait un tableau d'objets parceque java fait abstraction des manipulations que l'on a à faire en c++ et il travaille en interne avec des reference.

___ Question 6 ___
La première chose à faire est de mettre les attributs de Film à private (ou protected).
Dans le cas de chaptersDurations cela n'est pas suffisant car l'appelant les deux méthodes détiendra un pointeur vers le tableau des chapitres et pourra alterer le contenu de ce dernier à tout moment; La classe film perdra le controle de ses attributs.
Pour le modifieur "setter" on doit non pas affecté à chaptersDurations le tableau (pointeur) tel qu'il est mais en faire une copie propre à l'objet et l'affecter à chaptersDurations.
Pour l'accesseur on pourrait rajouter le mot clé const à la signature de la méthode pour empecher l'alteration du contenu pointé par le pointeur retourné et donc l'alteration inadéquate du tableau chaptersDurations mais cela ne résout pas le problème de suppression du tableau. On devrait donc retourner une copie du tableau chaptersDurations.

___ Question 7 ___
La mémoire qui n'est pas gérée automatiquement par c++ est la mémoire dynamique (ie le tas, la mémoire allouée par new). Ce sont donc les classes où on a utilisé ce mot clé qui doivent être modifiées pour empecher les fuites de mémoire. Notamment, la classe Film. La classe Film a, donc, besoin d'un destructeur qui libérera la mémoire allouée avant la destruction de l'objet.
Dans certain cas la copie d'objets pose problème. Eventuellement quand l'objet possede un pointeur comme attribut dans ce cas la valeur qui est réellement d'interet et devrait être propre à chaque objet est le pointé mais lors de la copie c'est seulement le pointeur qui est copié et le pointé devient partagés par les deux instances de l'objets. Dans ce cas, il faudrait empecher la copie d'objets sinon la gérer en modifiant la fonction de copie et l'opérateur =.
[code_etape7_afterChangingTheChaptersOfTheCopy]: the copy method is still default it affects the same attributes to the copy. movie and its copy share the same array but different pointers. calling the setChaptersDurations method on copy will delete the current array and replace it with the argument thus deleting the array pointed to by the original movie.
